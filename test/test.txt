replied
Comment {
  subreddit_id: 't5_2vyjw',
  banned_by: null,
  removal_reason: null,
  link_id: 't3_415m0w',
  likes: true,
  replies: '',
  user_reports: [],
  saved: false,
  id: 'cyzux83',
  gilded: 0,
  archived: false,
  report_reasons: [],
  author: User { name: 'eightNote' },
  parent_id: 't3_415m0w',
  score: 1,
  approved_by: null,
  controversiality: 0,
  body: 'hello fom jawfr',
  edited: false,
  author_flair_css_class: '',
  downs: 0,
  body_html: '&lt;div class="md"&gt;&lt;p&gt;hello fom jawfr&lt;/p&gt;\n&lt;/div&gt;',
  stickied: false,
  subreddit: Subreddit { name: 'eightNote' },
  score_hidden: false,
  name: 't1_cyzux83',
  created: 1452931924,
  author_flair_text: '',
  created_utc: 1452903124,
  ups: 1,
  mod_reports: [],
  num_reports: 0,
  distinguished: null }
could not distinguish
{ [StatusCodeError: 403 - [object Object]]
  name: 'StatusCodeError',
  statusCode: 403,
  message: '403 - [object Object]',
  error: { error: 403 },
  options: 
   { method: 'POST',
     uri: 'https://oauth.reddit.com/api/distinguish',
     form: { id: 't1_cyzux83', show: 'yes', api_type: 'json' },
     headers: 
      { Authorization: 'bearer 8500472-qzS8CzomUj85HANPm3M5BN1pN0o',
        'User-Agent': 'jawfr-test:v0.0.1 (by /u/eightnote)' },
     json: true,
     callback: undefined,
     transform: undefined,
     simple: true,
     resolveWithFullResponse: false },
  response: 
   IncomingMessage {
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null,
        resumeScheduled: false },
     readable: false,
     domain: null,
     _events: 
      { end: [Object],
        close: [Object],
        data: [Function],
        error: [Function] },
     _eventsCount: 4,
     _maxListeners: undefined,
     socket: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: null,
        npnProtocol: false,
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 9,
        _connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'oauth.reddit.com',
        _readableState: [Object],
        readable: false,
        domain: null,
        _maxListeners: 0,
        _writableState: [Object],
        writable: false,
        allowHalfOpen: false,
        destroyed: true,
        bytesRead: 768,
        _bytesDispatched: 316,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        ssl: [Object],
        server: undefined,
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Object],
        read: [Function],
        _consuming: true,
        _idleNext: null,
        _idlePrev: null,
        _idleTimeout: -1 },
     connection: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: null,
        npnProtocol: false,
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 9,
        _connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'oauth.reddit.com',
        _readableState: [Object],
        readable: false,
        domain: null,
        _maxListeners: 0,
        _writableState: [Object],
        writable: false,
        allowHalfOpen: false,
        destroyed: true,
        bytesRead: 768,
        _bytesDispatched: 316,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        ssl: [Object],
        server: undefined,
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Object],
        read: [Function],
        _consuming: true,
        _idleNext: null,
        _idlePrev: null,
        _idleTimeout: -1 },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: true,
     headers: 
      { server: 'cloudflare-nginx',
        date: 'Sat, 16 Jan 2016 00:12:04 GMT',
        'content-type': 'application/json; charset=UTF-8',
        'content-length': '14',
        connection: 'close',
        'set-cookie': [Object],
        'x-ua-compatible': 'IE=edge',
        'x-frame-options': 'SAMEORIGIN',
        'x-content-type-options': 'nosniff',
        'x-xss-protection': '1; mode=block',
        expires: '-1',
        'cache-control': 'private, s-maxage=0, max-age=0, must-revalidate, max-age=0, must-revalidate',
        'x-ratelimit-remaining': '591.0',
        'x-ratelimit-used': '9',
        'x-ratelimit-reset': '476',
        'x-moose': 'majestic',
        'strict-transport-security': 'max-age=15552000; includeSubDomains; preload',
        'cf-ray': '26559b524d881bc7-SEA' },
     rawHeaders: 
      [ 'Server',
        'cloudflare-nginx',
        'Date',
        'Sat, 16 Jan 2016 00:12:04 GMT',
        'Content-Type',
        'application/json; charset=UTF-8',
        'Content-Length',
        '14',
        'Connection',
        'close',
        'Set-Cookie',
        '__cfduid=d109fc6fa55864d295868c6928f552e5e1452903124; expires=Sun, 15-Jan-17 00:12:04 GMT; path=/; domain=.reddit.com; HttpOnly',
        'x-ua-compatible',
        'IE=edge',
        'x-frame-options',
        'SAMEORIGIN',
        'x-content-type-options',
        'nosniff',
        'x-xss-protection',
        '1; mode=block',
        'expires',
        '-1',
        'cache-control',
        'private, s-maxage=0, max-age=0, must-revalidate',
        'x-ratelimit-remaining',
        '591.0',
        'x-ratelimit-used',
        '9',
        'x-ratelimit-reset',
        '476',
        'cache-control',
        'max-age=0, must-revalidate',
        'X-Moose',
        'majestic',
        'Strict-Transport-Security',
        'max-age=15552000; includeSubDomains; preload',
        'CF-RAY',
        '26559b524d881bc7-SEA' ],
     trailers: {},
     rawTrailers: [],
     upgrade: false,
     url: '',
     method: null,
     statusCode: 403,
     statusMessage: 'Forbidden',
     client: 
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: null,
        npnProtocol: false,
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 9,
        _connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'oauth.reddit.com',
        _readableState: [Object],
        readable: false,
        domain: null,
        _maxListeners: 0,
        _writableState: [Object],
        writable: false,
        allowHalfOpen: false,
        destroyed: true,
        bytesRead: 768,
        _bytesDispatched: 316,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        ssl: [Object],
        server: undefined,
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Object],
        read: [Function],
        _consuming: true,
        _idleNext: null,
        _idlePrev: null,
        _idleTimeout: -1 },
     _consuming: true,
     _dumped: false,
     req: 
      ClientRequest {
        domain: null,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedHeader: [Object],
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Object],
        connection: [Object],
        _header: 'POST /api/distinguish HTTP/1.1\r\nAuthorization: bearer 8500472-qzS8CzomUj85HANPm3M5BN1pN0o\r\nUser-Agent: jawfr-test:v0.0.1 (by /u/eightnote)\r\nhost: oauth.reddit.com\r\ncontent-type: application/x-www-form-urlencoded\r\naccept: application/json\r\ncontent-length: 36\r\nConnection: close\r\n\r\n',
        _headers: [Object],
        _headerNames: [Object],
        _onPendingData: null,
        agent: [Object],
        socketPath: undefined,
        method: 'POST',
        path: '/api/distinguish',
        parser: null,
        res: [Circular] },
     request: 
      Request {
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        callback: [Function],
        headers: [Object],
        uri: [Object],
        method: 'POST',
        readable: true,
        writable: true,
        explicitMethod: true,
        _qs: [Object],
        _auth: [Object],
        _oauth: [Object],
        _multipart: [Object],
        _redirect: [Object],
        _tunnel: [Object],
        _rp_resolve: [Function],
        _rp_reject: [Function],
        _rp_promise: [Object],
        _rp_callbackOrig: undefined,
        _rp_options: [Object],
        setHeader: [Function],
        hasHeader: [Function],
        getHeader: [Function],
        removeHeader: [Function],
        localAddress: undefined,
        pool: {},
        dests: [],
        __isRequestRequest: true,
        _callback: [Function: RP$callback],
        proxy: null,
        tunnel: true,
        setHost: true,
        originalCookieHeader: undefined,
        _disableCookies: true,
        _jar: undefined,
        port: 443,
        host: 'oauth.reddit.com',
        body: 'id=t1_cyzux83&show=yes&api_type=json',
        path: '/api/distinguish',
        _json: true,
        httpModule: [Object],
        agentClass: [Object],
        agent: [Object],
        _started: true,
        href: 'https://oauth.reddit.com/api/distinguish',
        req: [Object],
        ntick: true,
        response: [Circular],
        originalHost: 'oauth.reddit.com',
        originalHostHeaderName: 'host',
        responseContent: [Circular],
        _destdata: true,
        _ended: true,
        _callbackCalled: true },
     toJSON: [Function: responseToJSON],
     caseless: Caseless { dict: [Object] },
     read: [Function],
     body: { error: 403 } } }
